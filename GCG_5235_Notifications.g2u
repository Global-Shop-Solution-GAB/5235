Program.Sub.Preflight.Start
V.Global.bError.Declare(Boolean, False)
Program.Sub.Preflight.End

Program.Sub.Main.Start
'GCG_5235_Notifications.g2u
'Trey S
'11/16/2018
'For Winesburg Chair
'This script will check for failed transactions from GCG_5235_RFID_TRANS.g2u
'and notify the email set in the maintenance program

F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.sFilter.Declare(String)
V.Local.sSubject.Declare(String)
V.Local.sBody.Declare(String)
V.Local.sAttemptedTime.Declare(String)
V.Local.sAttemptedDate.Declare(String)
V.Local.sSender.Declare(String)
V.Local.sRecipient.Declare(String)
V.Local.dDate.Declare(Date)
V.Local.dTime.Declare(Date)
V.Local.sTemp.Declare(String)
V.Local.iTemp.Declare(Long)

F.ODBC.Connection!Con.OpenCompanyConnection
F.Intrinsic.Control.CallSub(LoadNotificationSettings)

'check for failed wirepoll transactions
F.Intrinsic.Date.DateAdd("N", -5, V.Ambient.Time, V.Local.dTime)
F.Intrinsic.String.Build("select RTRIM(TRANS_ID) as TRANS_ID, RTRIM(TRANS_TYPE) as TRANS_TYPE, RTRIM(Attempted_Date) as ATTEMPTED_DATE, RTRIM(Attempted_Time) as ATTEMPTED_TIME, RTRIM(DESCR) as DESCR from V_WL_AUDIT_LOG where STATUS_FLAG = 'U' and ATTEMPTED_DATE = '{0}' and ATTEMPTED_TIME > '{1}'", V.Ambient.Date.FormatYYYY-MM-DD, V.Local.dTime.FormatHH:NN:SS, V.Local.sSQL)

F.Data.DataTable.CreateFromSQL("dtWirepollErrors", "Con", V.Local.sSQL)

F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtWirepollErrors.RowCount--, 1)
	F.Intrinsic.String.Build("{0}or WIRELESS_ID = '{1}' ", V.Local.sFilter, V.DataTable.dtWirepollErrors(V.Local.iCounter).TRANS_ID!FieldValTrim, V.Local.sFilter)
F.Intrinsic.Control.Next(V.Local.iCounter)

'check for transactions never given over to wirepoll
F.Intrinsic.String.Build("select RTRIM(EPC) as EPC, RTRIM(TID) as TID, RTRIM(USER_RFID) as USER_RFID, RTRIM(ANTENNA) as ANTENNA, RTRIM(DATEANDTIME) as DATEANDTIME, RTRIM(PROCESSED) as PROCESSED, RTRIM(TRANS_TYPE) as TRANS_TYPE, RTRIM(WIRELESS_ID) as WIRELESS_ID, RTRIM(READERNAME) as READER from GCG_5235_RFID_OUTPUT where PROCESSED = 'F' {0}", V.Local.sFilter, V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("dtRFIDErrorsTemp", "Con", V.Local.sSQL)
F.Data.DataTable.AddColumn("dtRFIDErrorsTemp", "Date", "Long")
F.Data.DataTable.AddColumn("dtRFIDErrorsTemp", "Time", "Long")

F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtRFIDErrorsTemp.RowCount--, 1)
	F.Intrinsic.Control.If(V.DataTable.dtRFIDErrorsTemp(V.Local.iCounter).DATEANDTIME!FieldValTrim, !=, "")
		V.Local.dDate.Set(V.DataTable.dtRFIDErrorsTemp(V.Local.iCounter).DATEANDTIME!FieldValTrim)
	F.Intrinsic.Control.Else
		V.Local.dDate.Set(V.Ambient.Now)
	F.Intrinsic.Control.EndIf
	
	F.Data.DataTable.SetValue("dtRFIDErrorsTemp", V.Local.iCounter, "Time", V.Local.dDate.FormatHHNNSS, "Date", V.Local.dDate.FormatYYYYMMDD)
F.Intrinsic.Control.Next(V.Local.iCounter)

'V.Local.dDate.Set(V.Ambient.Date)
V.Local.sTemp.Set(V.Ambient.Time.FormatHHNNSS)
F.Intrinsic.Math.Sub(V.Local.sTemp, 500, V.Local.iTemp)
F.Intrinsic.String.Build("DATE = {0} and TIME > {1}", V.Ambient.Date.FormatYYYYMMDD, V.Local.iTemp, V.Local.sFilter)
F.Data.DataView.Create("dtRFIDErrorsTemp", "dvRFIDErrors", 22, V.Local.sFilter, "")
F.Data.DataView.ToDataTable("dtRFIDErrorsTemp", "dvRFIDErrors", "dtRFIDErrors")

'Join them together
F.Data.Linq.Join("InnerJoin", "DataTable", "dtRFIDErrors*!*A", "DataTable", "dtAntennas*!*B", "A.ANTENNA = B.ANTENNA and A.READER = B.READER", "*", "", "", "", "dtErrors1", True)
F.Data.Linq.Join("LeftJoin", "DataTable", "dtErrors1*!*A", "DataTable", "dtWirepollErrors*!*B", "A.WIRELESS_ID = B.TRANS_ID", "*", "", "", "", "dtErrors", True)
F.Data.DataTable.Close("dtErrors1")

F.Intrinsic.Control.If(V.DataTable.dtErrors.RowCount, =, 0)
	F.Intrinsic.Control.CallSub(Exit)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtErrors.RowCount--, 1)
	F.Intrinsic.String.Build("{0}*!*", V.DataTable.dtErrors(V.Local.iCounter).SENDER_EMAILID!FieldValTrim, V.Local.sSender)
	F.Intrinsic.String.Build("{0}*!*", V.DataTable.dtErrors(V.Local.iCounter).REC_EMAILID!FieldValTrim, V.Local.sRecipient)

	F.Intrinsic.Control.If(V.DataTable.dtErrors(V.Local.iCounter).PROCESSED!FieldValTrim, =, "Y")
		V.Local.dDate.Set(V.DataTable.dtErrors(V.Local.iCounter).ATTEMPTED_DATE!FieldValTrim)
		
		V.Local.sAttemptedTime.Set(V.DataTable.dtErrors(V.Local.iCounter).ATTEMPTED_TIME!FieldValTrim)
				
		F.Intrinsic.String.Build("RFID Transaction {0} from antenna {1} reader {7} and transaction {6} with RFID value {5} got to wirepoll at {2} {3} but failed with error message: {4}", V.DataTable.dtErrors(V.Local.iCounter).WIRELESS_ID!FieldValTrim, V.DataTable.dtErrors(V.Local.iCounter).ANTENNA!FieldValTrim, V.Local.dTime.FormatHH:NN:SS, V.Local.sAttemptedTime, V.DataTable.dtErrors(V.Local.iCounter).DESCR!FieldValTrim, V.DataTable.dtErrors(V.Local.iCounter).USER_RFID!FieldValtrim, V.DataTable.dtErrors(V.Local.iCounter).TRANS_TYPE!FieldValTrim, V.DataTable.dtErrors(V.Local.iCounter).READER!FieldValTrim, V.Local.sBody)
		
		F.Intrinsic.String.Build("RFID Transaction {0} failed", V.DataTable.dtErrors(V.Local.iCounter).WIRELESS_ID!FieldValTrim, V.Local.sSubject)
	F.Intrinsic.Control.Else
		
		F.Intrinsic.Control.If(V.DataTable.dtErrors(V.Local.iCounter).DateAndTime!FieldValTrim, !=, "")
			V.Local.dDate.Set(V.DataTable.dtErrors(V.Local.iCounter).DateAndTime!FieldValTrim)
		F.Intrinsic.Control.Else
			V.Local.dDate.Set(V.Ambient.Now)
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.String.Build("An RFID Transaction from antenna {4} reader {6} and transaction {5} with TID {0} and RFID value {1} failed to process at {2} {3}. This is either because there was nothing set up in the maintenance program for this antenna/transaction combination, or the associated data was not found.", V.DataTable.dtErrors(V.Local.iCounter).TID!FieldValTrim, V.DataTable.dtErrors(V.Local.iCounter).USER_RFID!FieldValtrim, V.Local.dDate.FormatHH:NN:SS, V.Local.dDate.FormatMM/DD/YYYY, V.DataTable.dtErrors(V.Local.iCounter).ANTENNA!FieldValTrim, V.DataTable.dtErrors(V.Local.iCounter).TRANS_TYPE!FieldValTrim, V.DataTable.dtErrors(V.Local.iCounter).READER!FieldValTrim, V.Local.sBody)
		
		F.Intrinsic.String.Build("RFID transaction {0} failed", V.DataTable.dtErrors(V.Local.iCounter).TID!FieldValTrim, V.Local.sSubject)
	F.Intrinsic.Control.EndIf
	
	F.Global.Messaging.QueueMessage(V.Caller.CompanyCode, "5235", "GCG_5235_Notifications", V.Local.sSubject, V.Local.sSender, V.Local.sRecipient, V.Local.sBody)
F.Intrinsic.Control.Next(V.Local.iCounter)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Exit", "Unattended", True, "Project", "5235", "ProjectTitle", "RFID Notifications", "Task", "RFID_Notifications")
F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.LoadNotificationSettings.Start
'get which readers are set to have notifications

F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
'V.Local.sSQL.Set("select * from GCG_4843_RFID_MAINT where ENABLED = 1 and NOTIFY_FLAG = 1")
V.Local.sSQL.Set("select RTRIM(READER) READER, RTRIM(ANTENNA) ANTENNA, RTRIM(SENDER_EMAILID) SENDER_EMAILID, RTRIM(REC_EMAILID) REC_EMAILID from GCG_5235_RFID_MAINT where ENABLED = 1 and NOTIFY_FLAG = 1")
F.Data.DataTable.CreateFromSQL("dtAntennas", "Con", V.Local.sSQL, True)

F.Intrinsic.Control.If(V.DataTable.dtAntennas.RowCount, =, 0)
	F.Intrinsic.Control.CallSub(Exit)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Exit", "Unattended", True, "Project", "5235", "ProjectTitle", "RFID Notifications", "Task", "RFID_Notifications")
F.Intrinsic.Control.EndTry
Program.Sub.LoadNotificationSettings.End

Program.Sub.Exit.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.DataTable.dtAntennas.Exists)
	F.Data.DataTable.Close("dtAntennas")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataTable.dtWirepollErrors.Exists)
	F.Data.DataTable.Close("dtWirepollErrors")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataTable.dtRFIDErrors.Exists)
	F.Data.DataTable.Close("dtRFIDErrors")
F.Intrinsic.Control.EndIf

F.ODBC.Connection!Con.Close
F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Exit", "Unattended", True, "Project", "5235", "ProjectTitle", "RFID Notifications", "Task", "RFID_Notifications")
F.Intrinsic.Control.EndTry
Program.Sub.Exit.End

Program.Sub.CheckDirectory.Start
'check if the given import directories exist
'create them if they don't
'pass PATH to check

F.Intrinsic.Control.Try

V.Local.sPath.Declare(String)
V.Local.bExists.Declare(Boolean)

V.Local.sPath.Set(V.Args.Path)
F.Intrinsic.File.DirExists(V.Local.sPath, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists.Not)
	F.Intrinsic.File.CreateDir(V.Local.sPath)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Exit", "Unattended", True, "Project", "5235", "ProjectTitle", "RFID Notifications", "Task", "RFID_Notifications")
F.Intrinsic.Control.EndTry
Program.Sub.CheckDirectory.End

Program.Sub.ErrorMessage.Start
'basic error message for replacing catch block
'this is really just for when printing the message and ending program
'pass error number, error description, current subroutine
'optional callback sub, this will be called before ending
'optional unattended parameters, those subs may not exist if not using them but won't be called
F.Intrinsic.Control.Try

V.Local.iError.Declare(Long)
V.Local.sErrorDescription.Declare(String)
V.Local.sSubroutine.Declare(String)
V.Local.sError.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sCallback.Declare(String)

V.Local.iError.Set(V.Args.ErrorNumber)
V.Local.sErrorDescription.Set(V.Args.ErrorDescription)
V.Local.sSubroutine.Set(V.Args.Subroutine)

'make sure we aren't in an error loop
F.Intrinsic.Control.If(V.Global.bError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndIf
V.Global.bError.Set(True)

F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}", V.Caller.ScriptFile, V.Ambient.Newline, V.Local.sSubroutine, V.Local.iError, V.Local.sErrorDescription, V.Ambient.GABVersion, V.Local.sError)

F.Intrinsic.Variable.ArgExists("UNATTENDED", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.Control.If(V.Args.UNATTENDED)
		F.Intrinsic.Control.CallSub(UnattendedErrorMessage, "MESSAGE", V.Local.sError, "PROJECT", V.Args.PROJECT, "PROJECTTITLE", V.Args.PROJECTTITLE, "TASK", V.Args.Task)
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.UI.Msgbox(V.Local.sError)
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.ArgExists("Callback", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	V.Local.sCallback.Set(V.Args.Callback.Trim)
	F.Intrinsic.Control.CallSub(V.Local.sCallback)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Caller.ScriptFile,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.ErrorMessage.End

Program.Sub.UnattendedErrorMessage.Start
'send a short error message, add the log
'pass project ID, project title (for message box title), and error message

F.Intrinsic.Control.Try

V.Local.sMessage.Declare(String)

V.Local.sMessage.Set(V.Args.Message.Trim)
F.Intrinsic.String.Replace(V.Local.sMessage, V.Ambient.NewLine, ", ", V.Local.sMessage)

F.Intrinsic.UI.InvokeWaitDialog(V.Local.sMessage, V.Args.ProjectTitle)
F.Intrinsic.UI.Sleep(10)
F.Intrinsic.UI.CloseWaitDialog

F.Intrinsic.Control.CallSub(AddLog, "Project", V.Args.Project, "TASK", V.Args.Task, "Message", V.Local.sMessage)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Exit", "Unattended", True, "Project", "5235", "ProjectTitle", "RFID Notifications", "Task", "RFID_Notifications")
F.Intrinsic.Control.EndTry
Program.Sub.UnattendedErrorMessage.End

Program.Sub.AddLog.Start
'pass a project #, and a message
'date and time will be automatically added
'pass PROJECT (Folder, log name), MESSAGE (what to log)

F.Intrinsic.Control.Try

V.Local.sProject.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sPath.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sContents.Declare(String)
V.Local.sTask.Declare(String)

V.Local.sProject.Set(V.Args.Project.Trim)
V.Local.sMessage.Set(V.Args.Message.Trim)
V.Local.sTask.Set(V.Args.Task)

F.Intrinsic.String.Replace(V.Local.sMessage, V.Ambient.NewLine, ", ", V.Local.sMessage)

F.Intrinsic.File.MakeFilenameFriendly(V.Local.sProject, V.Local.sProject)
F.Intrinsic.String.Build("{0}\Custom\{1}\Log\", V.Caller.GlobalDir, V.Local.sProject, V.Local.sPath)
F.Intrinsic.Control.CallSub(CheckDirectory, "Path", V.Local.sPath)

F.Intrinsic.String.Build("{0}\{1}_Log.txt", V.Local.sPath, V.Local.sTask, V.Local.sFile)
F.Intrinsic.Control.CallSub(CheckFile, "File", V.Local.sFile)

F.Intrinsic.String.Build("{0} {1}: {2}", V.Ambient.Date.FormatYYYY-MM-DD, V.Ambient.Time.Format!HH:NN:SS, V.Local.sMessage, V.Local.sContents)
F.Intrinsic.File.Append2FileNewLine(V.Local.sFile, V.Local.sContents)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Exit", "Unattended", True, "Project", "5235", "ProjectTitle", "RFID Notifications", "Task", "RFID_Notifications")
F.Intrinsic.Control.EndTry
Program.Sub.AddLog.End

Program.Sub.CheckFile.Start
'check if the given file exists
'create it if it doesn't
'pass FILE to check

F.Intrinsic.Control.Try

V.Local.sFile.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sContents.Declare(String)

V.Local.sFile.Set(V.Args.File)
F.Intrinsic.File.Exists(V.Local.sFile, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists.Not)
	F.Intrinsic.String.Build("{0} {1}: Log Start", V.Ambient.Date.FormatYYYY-MM-DD, V.Ambient.Time.Format!HH:NN:SS, V.Local.sContents)
	F.Intrinsic.File.String2File(V.Local.sFile, V.Local.sContents)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Exit", "Unattended", True, "Project", "5235", "ProjectTitle", "RFID Notifications", "Task", "RFID_Notifications")
F.Intrinsic.Control.EndTry
Program.Sub.CheckFile.End